name: CI/CD - satellite

env:
  # override in-cluster config
  KUBECONFIG: /home/runner/.kube/config
  POD_NAMESPACE: default

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths-ignore:
      - "charts/mothership/**"
      - "infra/terraform/eks-**"
    branches: [ "**" ]

jobs:
  build-lepton-api-server:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "image_tag=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Lepton API server Docker image
      env:
        ECR_REPOSITORY: lepton-api-server
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        echo "tagging with $ECR_REPOSITORY:$IMAGE_TAG"
        docker build . --file lepton-api-server/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      if: github.event_name == 'push'
      env:
        ECR_REPOSITORY: lepton-api-server
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-lepton-deployment-operator:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "image_tag=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build LeptonDeployment operator Docker image
      env:
        ECR_REPOSITORY: lepton-deployment-operator
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        docker build . --file lepton-deployment-operator/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      if: github.event_name == 'push'
      env:
        ECR_REPOSITORY: lepton-deployment-operator
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-lepton-web:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "image_tag=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Lepton web Docker image
      env:
        ECR_REPOSITORY: lepton-web
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        docker build web --file web/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      env:
        ECR_REPOSITORY: lepton-web
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  e2e-tests:
    runs-on: self-hosted
    needs: [build-lepton-api-server, build-lepton-deployment-operator]
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "image_tag=$calculatedSha" >> $GITHUB_OUTPUT
        echo "workspace_name=testws$calculatedSha" >> $GITHUB_OUTPUT
        echo "api_token=token-$calculatedSha" >> $GITHUB_OUTPUT
        echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19.x
    - name: Install Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Build mothership cli
      run: |
        (cd lepton-mothership && go build -v ./cmd/mothership && mv mothership ..)
    - name: Create ci workspace
      run: |
        ./mothership workspace create \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --api-token "${{ steps.vars.outputs.api_token }}" \
          --cluster-name "${{ vars.K8S_CI }}" \
          --workspace-name "${{ steps.vars.outputs.workspace_name }}" \
          --git-ref "${{ steps.vars.outputs.branch }}" \
          --image-tag "${{ steps.vars.outputs.image_tag }}"
        ./mothership workspace wait \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --workspace-name "${{ steps.vars.outputs.workspace_name }}" \
          --timeout 10 \
          --expected-state "ready"
    - name: Run tests
      run: |
        pip install -e ./sdk
        e2e-tests/push-and-deploy.sh \
          ${{ steps.vars.outputs.api_token }} \
          https://${{ steps.vars.outputs.workspace_name }}.cloud.lepton.ai/api/v1
    - name: Delete ci workspace
      if: always()
      run: |
        ./mothership workspace delete \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --workspace-name "${{ steps.vars.outputs.workspace_name }}"
        ./mothership workspace wait \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --workspace-name "${{ steps.vars.outputs.workspace_name }}" \
          --timeout 10 \
          --expected-state "deleted"

  deploy-to-dev-latest:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "image_tag=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19.x
    - name: Build mothership cli
      run: |
        (cd lepton-mothership && go build -v ./cmd/mothership && mv mothership ..)
    - name: Update the latest workspace
      env:
        WORKSPACE_NAME: latest
      run: |
        ./mothership workspace update \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --workspace-name "$WORKSPACE_NAME" \
          --image-tag "${{ steps.vars.outputs.image_tag }}"
        ./mothership workspace wait \
          --token "${{ secrets.MOTHERSHIP_TOKEN }}" \
          --workspace-name "$WORKSPACE_NAME" \
          --timeout 10 \
          --expected-state "ready"
