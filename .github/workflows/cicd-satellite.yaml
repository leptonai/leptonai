name: CI/CD - satellite

env:
  # override in-cluster config
  KUBECONFIG: /home/runner/.kube/config
  POD_NAMESPACE: default

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths-ignore:
      - "charts/mothership/**"
      - "infra/terraform/eks-**"
    branches: [ "**" ]

jobs:
  build-lepton-api-server:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Lepton API server Docker image
      env:
        ECR_REPOSITORY: lepton-api-server
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        echo "tagging with $ECR_REPOSITORY:$IMAGE_TAG"
        docker build . --file lepton-api-server/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      if: github.event_name == 'push'
      env:
        ECR_REPOSITORY: lepton-api-server
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-lepton-deployment-operator:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build LeptonDeployment operator Docker image
      env:
        ECR_REPOSITORY: lepton-deployment-operator
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker build . --file lepton-deployment-operator/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      if: github.event_name == 'push'
      env:
        ECR_REPOSITORY: lepton-deployment-operator
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-lepton-web:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Install awscli
      run: |
        python -m pip install --upgrade pip
        pip install awscli
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Lepton web Docker image
      env:
        ECR_REPOSITORY: lepton-web
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker build web --file web/Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Push Docker image to latest
      env:
        ECR_REPOSITORY: lepton-web
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  e2e-tests:
    runs-on: self-hosted
    needs: [build-lepton-api-server, build-lepton-deployment-operator]
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19.x
    - name: Install Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Create ci workspace
      env:
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        API_TOKEN: token-${{ steps.vars.outputs.short_sha }}
        NAMESPACE: ci${{ steps.vars.outputs.short_sha }}
      run: |
        curl -H "Authorization: Bearer ${{ secrets.MOTHERSHIP_TOKEN }}" \
          -X POST \
          -d '{"cluster_name": "ci", "name": "'$NAMESPACE'", "api_token": "'$API_TOKEN'", "git_ref": "${{ steps.extract_branch.outputs.branch }}", "image_tag": "'$IMAGE_TAG'"}' \
          ${{ vars.MOTHERSHIP_URL }}/workspaces
        echo ""

        # TODO: do the wait in mothership cli
        END=$(date -ud "10 minutes" +%s)
        while (( $(date +%s) < $END )); do
          sleep 10
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.MOTHERSHIP_TOKEN }}" \
            ${{ vars.MOTHERSHIP_URL }}/workspaces/"$NAMESPACE")
          STATE=$(echo $RESPONSE | jq -r '.status.state')
          echo $(date) "workspace state:" $STATE
          if [ "$STATE" = "ready" ]; then
            echo "workspace is ready."
            exit 0
          fi
          if [ "$STATE" = "failed" ]; then
            echo $(date) "workspace creation failed."
            exit 1
          fi
        done

        echo $(date) "workspace creation timeout after 10 minutes."
        exit 1
    - name: Run tests
      env:
        API_TOKEN: token-${{ steps.vars.outputs.short_sha }}
        NAMESPACE: ci${{ steps.vars.outputs.short_sha }}
      run: |
        pip install -e ./sdk
        e2e-tests/push-and-deploy.sh $NAMESPACE $API_TOKEN https://$NAMESPACE.cloud.lepton.ai/api/v1
    - name: Delete ci workspace
      if: always()
      env:
        NAMESPACE: ci${{ steps.vars.outputs.short_sha }}
      run: |
        curl -H "Authorization: Bearer ${{ secrets.MOTHERSHIP_TOKEN }}" \
          -X DELETE \
          ${{ vars.MOTHERSHIP_URL }}/workspaces/$NAMESPACE

        # TODO: do the wait in mothership cli
        END=$(date -ud "10 minutes" +%s)
        while (( $(date +%s) < $END )); do
          sleep 10
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.MOTHERSHIP_TOKEN }}" \
            ${{ vars.MOTHERSHIP_URL }}/workspaces/"$NAMESPACE")
          if [ "$RESPONSE" = "404" ] || [ "$RESPONSE" = "500" ]; then
            echo "Workspace deleted."
            exit 0
          fi
        done
        echo $(date) "workspace deletion timeout after 10 minutes."
        exit 1

  deploy-to-dev-latest:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
    - uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short HEAD)
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
    - name: Update the latest workspace
      env:
        NAMESPACE: latest
        IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
      run: |
        curl -H "Authorization: Bearer ${{ secrets.MOTHERSHIP_TOKEN }}" -X PATCH \
          -d '{
                "cluster_name": "${{ vars.K8S_DEV }}",
                "name":"'$NAMESPACE'",
                "api_token": "${{ secrets.WORKSPACE_LATEST_API_TOKEN }}",
                "image_tag": "'$IMAGE_TAG'",
                "enable_web": true
              }' \
          https://mothership.cloud.lepton.ai/api/v1/workspaces
