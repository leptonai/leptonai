/*
Lambda Cloud API

API for interacting with the Lambda GPU Cloud

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lambdalabs

import (
	"encoding/json"
)

// checks if the LaunchInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LaunchInstanceRequest{}

// LaunchInstanceRequest struct for LaunchInstanceRequest
type LaunchInstanceRequest struct {
	// Short name of a region
	RegionName string `json:"region_name"`
	// Name of an instance type
	InstanceTypeName string `json:"instance_type_name"`
	// Names of the SSH keys to allow access to the instances. Currently, exactly one SSH key must be specified.
	SshKeyNames []string `json:"ssh_key_names"`
	// Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified.
	FileSystemNames []string `json:"file_system_names,omitempty"`
	// Number of instances to launch
	Quantity *int32 `json:"quantity,omitempty"`
	// User-provided name for the instance
	Name NullableString `json:"name,omitempty"`
}

// NewLaunchInstanceRequest instantiates a new LaunchInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchInstanceRequest(regionName string, instanceTypeName string, sshKeyNames []string) *LaunchInstanceRequest {
	this := LaunchInstanceRequest{}
	this.RegionName = regionName
	this.InstanceTypeName = instanceTypeName
	this.SshKeyNames = sshKeyNames
	var quantity int32 = 1
	this.Quantity = &quantity
	return &this
}

// NewLaunchInstanceRequestWithDefaults instantiates a new LaunchInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchInstanceRequestWithDefaults() *LaunchInstanceRequest {
	this := LaunchInstanceRequest{}
	var quantity int32 = 1
	this.Quantity = &quantity
	return &this
}

// GetRegionName returns the RegionName field value
func (o *LaunchInstanceRequest) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceRequest) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *LaunchInstanceRequest) SetRegionName(v string) {
	o.RegionName = v
}

// GetInstanceTypeName returns the InstanceTypeName field value
func (o *LaunchInstanceRequest) GetInstanceTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceTypeName
}

// GetInstanceTypeNameOk returns a tuple with the InstanceTypeName field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceRequest) GetInstanceTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceTypeName, true
}

// SetInstanceTypeName sets field value
func (o *LaunchInstanceRequest) SetInstanceTypeName(v string) {
	o.InstanceTypeName = v
}

// GetSshKeyNames returns the SshKeyNames field value
func (o *LaunchInstanceRequest) GetSshKeyNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SshKeyNames
}

// GetSshKeyNamesOk returns a tuple with the SshKeyNames field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceRequest) GetSshKeyNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshKeyNames, true
}

// SetSshKeyNames sets field value
func (o *LaunchInstanceRequest) SetSshKeyNames(v []string) {
	o.SshKeyNames = v
}

// GetFileSystemNames returns the FileSystemNames field value if set, zero value otherwise.
func (o *LaunchInstanceRequest) GetFileSystemNames() []string {
	if o == nil || IsNil(o.FileSystemNames) {
		var ret []string
		return ret
	}
	return o.FileSystemNames
}

// GetFileSystemNamesOk returns a tuple with the FileSystemNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceRequest) GetFileSystemNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.FileSystemNames) {
		return nil, false
	}
	return o.FileSystemNames, true
}

// HasFileSystemNames returns a boolean if a field has been set.
func (o *LaunchInstanceRequest) HasFileSystemNames() bool {
	if o != nil && !IsNil(o.FileSystemNames) {
		return true
	}

	return false
}

// SetFileSystemNames gets a reference to the given []string and assigns it to the FileSystemNames field.
func (o *LaunchInstanceRequest) SetFileSystemNames(v []string) {
	o.FileSystemNames = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *LaunchInstanceRequest) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceRequest) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *LaunchInstanceRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *LaunchInstanceRequest) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LaunchInstanceRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LaunchInstanceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *LaunchInstanceRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *LaunchInstanceRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *LaunchInstanceRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *LaunchInstanceRequest) UnsetName() {
	o.Name.Unset()
}

func (o LaunchInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LaunchInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region_name"] = o.RegionName
	toSerialize["instance_type_name"] = o.InstanceTypeName
	toSerialize["ssh_key_names"] = o.SshKeyNames
	if !IsNil(o.FileSystemNames) {
		toSerialize["file_system_names"] = o.FileSystemNames
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableLaunchInstanceRequest struct {
	value *LaunchInstanceRequest
	isSet bool
}

func (v NullableLaunchInstanceRequest) Get() *LaunchInstanceRequest {
	return v.value
}

func (v *NullableLaunchInstanceRequest) Set(val *LaunchInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchInstanceRequest(val *LaunchInstanceRequest) *NullableLaunchInstanceRequest {
	return &NullableLaunchInstanceRequest{value: val, isSet: true}
}

func (v NullableLaunchInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


